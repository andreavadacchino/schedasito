document.addEventListener('DOMContentLoaded', function () {    const profileForm = document.getElementById('profile-form');    const nameInput = document.getElementById('profile-name-input');    const emailInput = document.getElementById('profile-email-input');    const roleInput = document.getElementById('profile-role-input');    const nameDisplay = document.getElementById('profile-name-display');    const roleDisplay = document.getElementById('profile-role-display');    // const joinDateDisplay = document.getElementById('profile-join-date-display'); // For future use    const errorNotificationArea = document.getElementById('error-notification-area');    const successNotificationArea = document.getElementById('success-notification-area');    function showError(message) {        errorNotificationArea.textContent = message;        errorNotificationArea.style.display = 'block';        successNotificationArea.style.display = 'none';    }    function showSuccess(message) {        successNotificationArea.textContent = message;        successNotificationArea.style.display = 'block';        errorNotificationArea.style.display = 'none';    }    // Reusable fetchApi function (consider moving to a shared.js if many pages use it)    async function fetchApi(url, options = {}) {        options.credentials = 'include'; // Send cookies        options.headers = {            'Content-Type': 'application/json',            'Accept': 'application/json',            ...options.headers,        };        try {            const response = await fetch(url, options);            if (!response.ok) {                if (response.status === 401 || response.status === 403) {                    showError("Sessione scaduta o non autorizzato. Verrai reindirizzato alla pagina di login.");                    setTimeout(() => {                        window.location.href = '/login_page';                    }, 3000);                    return null;                }                const errorData = await response.json().catch(() => ({ message: `Errore ${response.status}: ${response.statusText}` }));                showError(errorData.message || `Si Ã¨ verificato un errore: ${response.statusText}`);                return null;            }            if (response.status === 204) { // No Content                return {}; // Return an empty object for successful no-content responses            }            return await response.json();        } catch (error) {            showError(`Errore di rete o fetch: ${error.message}`);            return null;        }    }    async function loadProfileData() {        const data = await fetchApi('/api/profile');        if (data) {            nameInput.value = data.name || '';            emailInput.value = data.email || '';            roleInput.value = data.role || '';            nameDisplay.textContent = data.name || 'N/A';            roleDisplay.textContent = data.role || 'N/A';            // Example for join date if available in API in future            // if (data.join_date) {            //     joinDateDisplay.textContent = `Membro da ${new Date(data.join_date).toLocaleDateString()}`;            // }        } else {            showError("Impossibile caricare i dati del profilo.");        }    }    profileForm.addEventListener('submit', async function (event) {        event.preventDefault();        successNotificationArea.style.display = 'none';        errorNotificationArea.style.display = 'none';        const updatedProfile = {            name: nameInput.value,            email: emailInput.value,            role: roleInput.value,        };        if (!updatedProfile.name || !updatedProfile.email) {            showError("Nome ed Email sono campi obbligatori.");            return;        }        const result = await fetchApi('/api/profile', {            method: 'PUT',            body: JSON.stringify(updatedProfile),        });        if (result) {            showSuccess('Profilo aggiornato con successo!');            // Optionally re-populate display fields if backend sanitizes/changes data            nameDisplay.textContent = result.name || 'N/A';            roleDisplay.textContent = result.role || 'N/A';            nameInput.value = result.name || '';            emailInput.value = result.email || '';            roleInput.value = result.role || '';        }    });    // Initial load    loadProfileData();});