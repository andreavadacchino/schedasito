document.addEventListener('DOMContentLoaded', function () {    const archivedProjectsContainer = document.getElementById('archived-projects-container');    const loadingMessage = document.getElementById('loading-archive-message');    const errorNotificationArea = document.getElementById('error-notification-area');    function showError(message) {        if (errorNotificationArea) {            errorNotificationArea.textContent = message;            errorNotificationArea.style.display = 'block';            // setTimeout(() => { errorNotificationArea.style.display = 'none'; }, 5000); // Optional: auto-hide        }        if (loadingMessage) loadingMessage.style.display = 'none';        archivedProjectsContainer.innerHTML = `<p class="col-span-full text-center p-4 text-red-500">${message}</p>`;    }    async function fetchApi(url, options = {}) {        options.credentials = 'include';        options.headers = {            'Content-Type': 'application/json',            'Accept': 'application/json',            ...options.headers,        };        try {            const response = await fetch(url, options);            if (!response.ok) {                if (response.status === 401 || response.status === 403) {                    showError("Sessione scaduta o non autorizzato. Verrai reindirizzato alla pagina di login.");                    setTimeout(() => { window.location.href = '/login_page'; }, 3000);                    return null;                }                const errorData = await response.json().catch(() => ({ message: `Errore ${response.status}` }));                showError(errorData.message || `Errore ${response.status}`);                return null;            }            return response.status === 204 ? {} : await response.json();        } catch (error) {            showError(`Errore di rete: ${error.message}`);            return null;        }    }    function renderProjectCard(project) {        const card = document.createElement('div');        card.className = 'bg-white rounded-xl shadow-lg overflow-hidden transform transition-all hover:scale-105';        // Client and Team names might need to be fetched or included in project data by the API        // For now, displaying IDs or placeholders if names are not directly available.        const clientName = project.client_name || (project.client_id ? `Cliente ID: ${project.client_id}` : 'Cliente non specificato');        const teamName = project.team_name || (project.team_id ? `Team ID: ${project.team_id}` : 'Team non specificato');        const deadline = project.deadline ? new Date(project.deadline).toLocaleDateString() : 'N/D';        card.innerHTML = `            <div class="p-6">                <h3 class="text-xl font-semibold text-slate-800 mb-2 truncate" title="${project.name}">${project.name}</h3>                <p class="text-sm text-slate-600 mb-1">Cliente: ${clientName}</p>                <p class="text-sm text-slate-600 mb-1">Team: ${teamName}</p>                <p class="text-sm text-slate-500 mb-3">Scadenza: ${deadline}</p>                <div class="flex justify-between items-center mb-3">                    <span class="px-3 py-1 text-xs font-semibold text-slate-700 bg-slate-200 rounded-full">${project.status}</span>                    <!-- Optional: Add an unarchive button here -->                </div>                <a href="/scheda-sito?project_id=${project.id}" class="button-secondary w-full text-center text-sm">Visualizza Dettagli</a>            </div>        `;        return card;    }    async function loadArchivedProjects() {        if (loadingMessage) loadingMessage.style.display = 'block';        archivedProjectsContainer.innerHTML = ''; // Clear before loading, keep loading message if it's separate        const projects = await fetchApi('/api/projects?status=Archiviato');        if (loadingMessage) loadingMessage.style.display = 'none';        if (projects && Array.isArray(projects)) {            if (projects.length === 0) {                archivedProjectsContainer.innerHTML = '<p class="col-span-full text-center p-4">Nessun progetto archiviato trovato.</p>';                return;            }            projects.forEach(project => {                archivedProjectsContainer.appendChild(renderProjectCard(project));            });        } else {            // showError was already called by fetchApi if projects is null            if (!errorNotificationArea.textContent) { // If fetchApi didn't set a specific error                showError("Errore nel caricamento dei progetti archiviati o nessun progetto trovato.");            }        }    }    // Initial Load    loadArchivedProjects();});