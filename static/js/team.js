document.addEventListener('DOMContentLoaded', function () {    const teamsContainer = document.getElementById('teams-container');    const newTeamButton = document.getElementById('new-team-button');    const teamModal = document.getElementById('team-modal');    const teamForm = document.getElementById('team-form');    const cancelTeamModalButton = document.getElementById('cancel-team-modal-button');    const teamNameModalInput = document.getElementById('team-name-modal');    const addMemberModal = document.getElementById('add-member-modal');    const addMemberForm = document.getElementById('add-member-form');    const cancelAddMemberModalButton = document.getElementById('cancel-add-member-modal-button');    const userSelectModal = document.getElementById('user-select-modal');    const addMemberTeamIdInput = document.getElementById('add-member-team-id-input');    const addMemberModalTitle = document.getElementById('add-member-modal-title');    const loadingTeamsMessage = document.getElementById('loading-teams-message');    const errorNotificationArea = document.getElementById('error-notification-area');    const successNotificationArea = document.getElementById('success-notification-area');    let allUsersCache = []; // Cache for users to avoid multiple fetches    function showError(message) {        errorNotificationArea.textContent = message;        errorNotificationArea.style.display = 'block';        successNotificationArea.style.display = 'none';        setTimeout(() => { errorNotificationArea.style.display = 'none'; }, 5000);    }    function showSuccess(message) {        successNotificationArea.textContent = message;        successNotificationArea.style.display = 'block';        errorNotificationArea.style.display = 'none';        setTimeout(() => { successNotificationArea.style.display = 'none'; }, 3000);    }    async function fetchApi(url, options = {}) {        options.credentials = 'include';        options.headers = {            'Content-Type': 'application/json',            'Accept': 'application/json',            ...options.headers,        };        try {            const response = await fetch(url, options);            if (!response.ok) {                if (response.status === 401 || response.status === 403) {                    showError("Sessione scaduta o non autorizzato. Verrai reindirizzato alla pagina di login.");                    setTimeout(() => { window.location.href = '/login_page'; }, 3000);                    return null;                }                const errorData = await response.json().catch(() => ({ message: `Errore ${response.status}` }));                showError(errorData.message || `Errore ${response.status}`);                return null;            }            return response.status === 204 ? {} : await response.json();        } catch (error) {            showError(`Errore di rete: ${error.message}`);            return null;        }    }    async function loadUsers() {        if (allUsersCache.length === 0) {            const users = await fetchApi('/api/users');            if (users) {                allUsersCache = users;            } else {                showError("Impossibile caricare l'elenco degli utenti.");            }        }    }    function renderTeamCard(team) {        const card = document.createElement('div');        card.className = 'bg-white shadow-md rounded-lg p-6';        let membersHtml = '<p class="text-sm text-slate-500">Nessun membro.</p>';        if (team.members && team.members.length > 0) {            membersHtml = '<ul class="list-disc list-inside space-y-1 mt-2">';            team.members.forEach(member => {                membersHtml += `<li class="text-sm text-slate-700 flex justify-between items-center">                                    <span>${member.name || member.username} (${member.role || 'N/A'})</span>                                    <button title="Rimuovi Membro" class="remove-member-button button-danger-small" data-team-id="${team.id}" data-user-id="${member.id}" data-user-name="${member.name || member.username}">                                        <span class="material-icons text-xs">person_remove</span>                                    </button>                               </li>`;            });            membersHtml += '</ul>';        }        card.innerHTML = `            <div class="flex justify-between items-center mb-3">                <h2 class="text-xl font-semibold text-slate-800">${team.name}</h2>                <button class="add-member-button button-secondary text-xs py-1 px-2" data-team-id="${team.id}" data-team-name="${team.name}">                    <span class="material-icons text-xs mr-1">person_add</span>Aggiungi Membro                </button>            </div>            ${membersHtml}        `;        // Add event listeners for dynamically created buttons        card.querySelectorAll('.add-member-button').forEach(button => {            button.addEventListener('click', function() {                const currentMembers = team.members || [];                openAddMemberModal(this.dataset.teamId, this.dataset.teamName, currentMembers);            });        });        card.querySelectorAll('.remove-member-button').forEach(button => {            button.addEventListener('click', function() {                removeMemberFromTeam(this.dataset.teamId, this.dataset.userId, this.dataset.userName, team.name);            });        });        return card;    }    async function loadTeams() {        teamsContainer.innerHTML = ''; // Clear current content        if(loadingTeamsMessage) loadingTeamsMessage.style.display = 'block';        const teams = await fetchApi('/api/teams');        if(loadingTeamsMessage) loadingTeamsMessage.style.display = 'none';        if (teams && Array.isArray(teams)) {            if (teams.length === 0) {                teamsContainer.innerHTML = '<p>Nessun team trovato. Crea il primo team!</p>';                return;            }            teams.forEach(team => {                teamsContainer.appendChild(renderTeamCard(team));            });        } else {            teamsContainer.innerHTML = '<p class="text-red-500">Errore nel caricamento dei team.</p>';        }    }    // New Team Modal    newTeamButton.addEventListener('click', () => {        teamForm.reset();        teamModal.style.display = 'flex';        teamNameModalInput.focus();    });    cancelTeamModalButton.addEventListener('click', () => teamModal.style.display = 'none');    teamModal.addEventListener('click', (e) => { if (e.target === teamModal) teamModal.style.display = 'none'; });    teamForm.addEventListener('submit', async function(event) {        event.preventDefault();        const teamName = teamNameModalInput.value.trim();        if (!teamName) {            showError("Il nome del team Ã¨ obbligatorio.");            return;        }        const result = await fetchApi('/api/teams', {            method: 'POST',            body: JSON.stringify({ name: teamName })        });        if (result) {            showSuccess(`Team "${teamName}" creato con successo!`);            teamModal.style.display = 'none';            loadTeams();        }    });    // Add Member Modal    function openAddMemberModal(teamId, teamName, currentMembers) {        addMemberForm.reset();        addMemberTeamIdInput.value = teamId;        addMemberModalTitle.textContent = `Aggiungi Membro a "${teamName}"`;        userSelectModal.innerHTML = '<option value="">Caricamento utenti...</option>';        const currentMemberIds = currentMembers.map(m => m.id);        const availableUsers = allUsersCache.filter(user => !currentMemberIds.includes(user.id));        if (availableUsers.length === 0) {            userSelectModal.innerHTML = '<option value="">Nessun utente disponibile da aggiungere</option>';        } else {            userSelectModal.innerHTML = '<option value="">Seleziona un utente</option>'; // Default option            availableUsers.forEach(user => {                const option = document.createElement('option');                option.value = user.id;                option.textContent = `${user.name || user.username} (${user.role || 'N/A'})`;                userSelectModal.appendChild(option);            });        }        addMemberModal.style.display = 'flex';    }    cancelAddMemberModalButton.addEventListener('click', () => addMemberModal.style.display = 'none');    addMemberModal.addEventListener('click', (e) => { if (e.target === addMemberModal) addMemberModal.style.display = 'none'; });    addMemberForm.addEventListener('submit', async function(event) {        event.preventDefault();        const teamId = addMemberTeamIdInput.value;        const userId = userSelectModal.value;        if (!userId) {            showError("Seleziona un utente da aggiungere.");            return;        }        const result = await fetchApi(`/api/teams/${teamId}/members`, {            method: 'POST',            body: JSON.stringify({ user_id: userId })        });        if (result) {            showSuccess("Membro aggiunto con successo!");            addMemberModal.style.display = 'none';            loadTeams(); // Refresh teams to show new member        }    });    async function removeMemberFromTeam(teamId, userId, userName, teamName) {        if (confirm(`Sei sicuro di voler rimuovere ${userName} dal team ${teamName}?`)) {            const result = await fetchApi(`/api/teams/${teamId}/members/${userId}`, {                method: 'DELETE'            });            if (result) {                showSuccess(`${userName} rimosso da ${teamName} con successo.`);                loadTeams();            } else {                showError(`Errore durante la rimozione di ${userName}.`);            }        }    }    // Initial Load    loadUsers(); // Load all users into cache first    loadTeams();});